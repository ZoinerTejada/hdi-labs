{"paragraphs":[{"text":"%md\n# Lab 6: Securing the Environment\n\nAdventureWorks has set up an [Azure Active Directory (AAD)](https://docs.microsoft.com/azure/active-directory/active-directory-whatis) domain, and has added user accounts and roles for employees to use when working with data. They want to make sure that sensitive information, such as user birthdates and passwords, is only accessible to admin-level employees. They have created a [domain-joined HDInsight Spark cluster](https://docs.microsoft.com/azure/hdinsight/hdinsight-domain-joined-configure) within a VNet, and joined to their AAD domain. Now they want to properly set up permissions to restrict access to certain data when users log in to Zeppelin to run queries, or generate reports from this data in Power BI.\n\nDomain-joined HDInsight clusters take advantage of strong authentication with Azure Active Directory users, as well as use role-based access control (RBAC) policies for various services, such as YARN and Hive. In this lab, you will view the users and groups synchronized from AAD in Ambari, use Ranger to control access to Hive tables, as well as configure data masks and row level filters. Finally, you will connect to your cluster's Hive tables in Power BI and observe the permissions being applied there.\n\n> To compare query results with different users, open this Zeppelin notebook in two different browsers, signing in as testuser1@contoso.com in one, and labuser@contoso.com in the other. This will allow you to see the difference in permissions applied to both accounts.","dateUpdated":"2017-10-29T23:29:49+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607650_-2105931742","id":"20171029-180745_1334469836","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29001","user":"testuser1","dateFinished":"2017-10-29T23:29:50+0000","dateStarted":"2017-10-29T23:29:49+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Lab 6: Securing the Environment</h1>\n<p>AdventureWorks has set up an <a href=\"https://docs.microsoft.com/azure/active-directory/active-directory-whatis\">Azure Active Directory (AAD)</a> domain, and has added user accounts and roles for employees to use when working with data. They want to make sure that sensitive information, such as user birthdates and passwords, is only accessible to admin-level employees. They have created a <a href=\"https://docs.microsoft.com/azure/hdinsight/hdinsight-domain-joined-configure\">domain-joined HDInsight Spark cluster</a> within a VNet, and joined to their AAD domain. Now they want to properly set up permissions to restrict access to certain data when users log in to Zeppelin to run queries, or generate reports from this data in Power BI.</p>\n<p>Domain-joined HDInsight clusters take advantage of strong authentication with Azure Active Directory users, as well as use role-based access control (RBAC) policies for various services, such as YARN and Hive. In this lab, you will view the users and groups synchronized from AAD in Ambari, use Ranger to control access to Hive tables, as well as configure data masks and row level filters. Finally, you will connect to your cluster&rsquo;s Hive tables in Power BI and observe the permissions being applied there.</p>\n<blockquote>\n  <p>To compare query results with different users, open this Zeppelin notebook in two different browsers, signing in as <a href=\"mailto:&#116;&#101;&#x73;t&#117;&#115;&#x65;&#x72;1&#64;&#x63;&#111;&#x6e;t&#111;so&#46;&#x63;&#x6f;m\">&#116;&#101;&#x73;t&#117;&#115;&#x65;&#x72;1&#64;&#x63;&#111;&#x6e;t&#111;so&#46;&#x63;&#x6f;m</a> in one, and <a href=\"mailto:&#x6c;&#x61;&#98;&#x75;s&#101;r&#x40;&#99;on&#116;o&#x73;&#111;.&#x63;&#111;&#x6d;\">&#x6c;&#x61;&#98;&#x75;s&#101;r&#x40;&#99;on&#116;o&#x73;&#111;.&#x63;&#111;&#x6d;</a> in the other. This will allow you to see the difference in permissions applied to both accounts.</p>\n</blockquote>\n</div>"}]}},{"text":"%md\nRun the show tables command using the %livy.sql magic below. This will show you Hive tables that are available for the currently logged in user. If you are logged in as testuser1, you should only see **hivesampletable** listed. If you are logged in as labuser, then you should see four tables listed in total. The reason testuser1 does not see weblogs, users, or products, is because the Hive permissions in Ranger has not been set up for the user or security group to which the user belongs.","dateUpdated":"2017-10-29T23:29:50+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607652_-2108240235","id":"20171029-183502_1656354820","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29002","user":"testuser1","dateFinished":"2017-10-29T23:29:50+0000","dateStarted":"2017-10-29T23:29:50+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Run the show tables command using the %livy.sql magic below. This will show you Hive tables that are available for the currently logged in user. If you are logged in as testuser1, you should only see <strong>hivesampletable</strong> listed. If you are logged in as labuser, then you should see four tables listed in total. The reason testuser1 does not see weblogs, users, or products, is because the Hive permissions in Ranger has not been set up for the user or security group to which the user belongs.</p>\n</div>"}]}},{"text":"%livy.sql\nshow tables","dateUpdated":"2017-10-29T23:26:47+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607678_-2104392746","id":"20171026-135146_1807221489","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29003"},{"text":"%md\n## Look at LDAP users and groups in Ambari\n\nSince we are using a domain-joined (or secure) cluster that is synchronized with AAD, we can look at the users and groups in Ambari. Open Ambari and look at users and groups under the Admin section. Be sure to log in with the labuser@contoso.com account, instead of the local cluster admin account.\n\nWhat you see should look similar to the following:\n\n![Ambari users](https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ambari-users.png)\n\nNotice that some users have a Type of Local, while others have a Type of LDAP. The LDAP users are the ones that are synchronized from AAD, such as **labuser** and **testuser1**. When you look at the groups, the one that appears was also defined in AAD. Any changes you make to users and groups in AAD are automatically synchronized to Ambari and Ranger.","dateUpdated":"2017-10-29T23:30:01+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"text"},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607694_-2024364975","id":"20171029-191040_2105374154","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29004","user":"testuser1","dateFinished":"2017-10-29T23:30:01+0000","dateStarted":"2017-10-29T23:30:01+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Look at LDAP users and groups in Ambari</h2>\n<p>Since we are using a domain-joined (or secure) cluster that is synchronized with AAD, we can look at the users and groups in Ambari. Open Ambari and look at users and groups under the Admin section. Be sure to log in with the <a href=\"mailto:&#108;abus&#x65;&#114;&#64;c&#111;n&#116;&#111;&#x73;&#111;&#46;&#x63;&#x6f;&#x6d;\">&#108;abus&#x65;&#114;&#64;c&#111;n&#116;&#111;&#x73;&#111;&#46;&#x63;&#x6f;&#x6d;</a> account, instead of the local cluster admin account.</p>\n<p>What you see should look similar to the following:</p>\n<p><img src=\"https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ambari-users.png\" alt=\"Ambari users\" /></p>\n<p>Notice that some users have a Type of Local, while others have a Type of LDAP. The LDAP users are the ones that are synchronized from AAD, such as <strong>labuser</strong> and <strong>testuser1</strong>. When you look at the groups, the one that appears was also defined in AAD. Any changes you make to users and groups in AAD are automatically synchronized to Ambari and Ranger.</p>\n</div>"}]}},{"text":"%md\n## Configure Hive permissions in Ranger\n\nNow that you've verified that the domain group and users exist, you will need to open Ranger to configure access to the weblogs and users Hive tables for members of **testgroup**. The **labuser** domain user is an admin, and has access to all Hive tables. This is the user account that administrators and HR personnel use to view customer information and purchase history. Users assigned to testgroup (testuser1, testuser2, etc.) should have the following restrictions, per AdventureWorks' leadership:\n\n1. Have access to all columns in the weblogs table.\n2. Have access to **only** the following columns in the users table: id, email, firstname, lastname, username, title,\ngender, phone, age, cell, birthdate, registered\n3. The value of the birthdate column in the users table should be redacted.\n4. Can view all rows in the weblogs table, **except** those with a 'Purchased' action.\n\n> When you log in to Ranger, use your **labuser** credentials. Please note that this is just the user alias, not the email address you use to log in to all other services.","dateUpdated":"2017-10-29T23:30:05+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607695_-2024749724","id":"20171029-192945_912117013","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29005","user":"testuser1","dateFinished":"2017-10-29T23:30:05+0000","dateStarted":"2017-10-29T23:30:05+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Configure Hive permissions in Ranger</h2>\n<p>Now that you&rsquo;ve verified that the domain group and users exist, you will need to open Ranger to configure access to the weblogs and users Hive tables for members of <strong>testgroup</strong>. The <strong>labuser</strong> domain user is an admin, and has access to all Hive tables. This is the user account that administrators and HR personnel use to view customer information and purchase history. Users assigned to testgroup (testuser1, testuser2, etc.) should have the following restrictions, per AdventureWorks&rsquo; leadership:</p>\n<ol>\n  <li>Have access to all columns in the weblogs table.</li>\n  <li>Have access to <strong>only</strong> the following columns in the users table: id, email, firstname, lastname, username, title,<br/>gender, phone, age, cell, birthdate, registered</li>\n  <li>The value of the birthdate column in the users table should be redacted.</li>\n  <li>Can view all rows in the weblogs table, <strong>except</strong> those with a &lsquo;Purchased&rsquo; action.</li>\n</ol>\n<blockquote>\n  <p>When you log in to Ranger, use your <strong>labuser</strong> credentials. Please note that this is just the user alias, not the email address you use to log in to all other services.</p>\n</blockquote>\n</div>"}]}},{"text":"%md\n### Create Hive access policies in Ranger\n\nCreate two new access policies in Ranger. One access policy, named `read-weblogs-all`, should allow users in the `testgroup` group to have `select` permissions for all columns (*) in the `weblogs` table in the `default` database. The other access policy, named `read-users-restricted`, should allow users in the `testgroup` group to have `select` permissions in the `weblogs` table in the `default` database on only the following columns: id, email, firstname, lastname, username, title, gender, phone, age, cell, birthdate, registered.\n\nWhen you are done, your Hive access policies should look similar to the following:\n\n![Ranger access policies](https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ranger-access-policies.png)","dateUpdated":"2017-10-29T23:30:08+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607696_-2014361504","id":"20171029-204025_1202359906","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29006","user":"testuser1","dateFinished":"2017-10-29T23:30:08+0000","dateStarted":"2017-10-29T23:30:08+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create Hive access policies in Ranger</h3>\n<p>Create two new access policies in Ranger. One access policy, named <code>read-weblogs-all</code>, should allow users in the <code>testgroup</code> group to have <code>select</code> permissions for all columns (*) in the <code>weblogs</code> table in the <code>default</code> database. The other access policy, named <code>read-users-restricted</code>, should allow users in the <code>testgroup</code> group to have <code>select</code> permissions in the <code>weblogs</code> table in the <code>default</code> database on only the following columns: id, email, firstname, lastname, username, title, gender, phone, age, cell, birthdate, registered.</p>\n<p>When you are done, your Hive access policies should look similar to the following:</p>\n<p><img src=\"https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ranger-access-policies.png\" alt=\"Ranger access policies\" /></p>\n</div>"}]}},{"text":"%md\nNow that you've added access policies for both weblogs and users, execute the show tables command once more to see if these tables now appear in the results.","dateUpdated":"2017-10-29T23:30:12+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607699_-2013976755","id":"20171029-211222_21533253","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29007","user":"testuser1","dateFinished":"2017-10-29T23:30:12+0000","dateStarted":"2017-10-29T23:30:12+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now that you&rsquo;ve added access policies for both weblogs and users, execute the show tables command once more to see if these tables now appear in the results.</p>\n</div>"}]}},{"text":"%livy.sql\nshow tables","dateUpdated":"2017-10-29T23:26:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{},"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"sql"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607700_-2015900499","id":"20171029-211316_1547390549","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29008"},{"text":"%md\nNotice that weblogs and users appear in the list of tables. Now let's see if we can select the first 10 rows from the weblogs table.","dateUpdated":"2017-10-29T23:30:16+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"text"},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607701_-2016285248","id":"20171029-211410_1485979446","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29009","user":"testuser1","dateFinished":"2017-10-29T23:30:16+0000","dateStarted":"2017-10-29T23:30:16+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Notice that weblogs and users appear in the list of tables. Now let&rsquo;s see if we can select the first 10 rows from the weblogs table.</p>\n</div>"}]}},{"text":"%livy.sql\nselect * from weblogs limit 10","dateUpdated":"2017-10-29T23:26:47+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607702_-2015131001","id":"20171026-135206_1324822431","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29010"},{"text":"%md\nYou should see the first 10 rows, as expected. Now, lets try to select * from users, returning the first 10 and see what happens.","dateUpdated":"2017-10-29T23:30:18+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607702_-2015131001","id":"20171029-211615_1015069836","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29011","user":"testuser1","dateFinished":"2017-10-29T23:30:18+0000","dateStarted":"2017-10-29T23:30:18+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>You should see the first 10 rows, as expected. Now, lets try to select * from users, returning the first 10 and see what happens.</p>\n</div>"}]}},{"text":"%livy.sql\nselect * from users limit 10","dateUpdated":"2017-10-29T23:26:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{},"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"sql"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607703_-2015515750","id":"20171029-211722_2127522771","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29012"},{"text":"%md\nWell, that didn't work. Notice the permission error telling you that testuser1 does not have select privilege on *. Remember, for members of the testgroup, only select privileges on specific columns were granted.\n\nNow retry the query, this time specifying the following columns: id, email, firstname, lastname, username, title, gender, phone, age, cell, birthdate, registered.","dateUpdated":"2017-10-29T23:30:22+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607704_-2017439495","id":"20171029-211726_1190826685","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29013","user":"testuser1","dateFinished":"2017-10-29T23:30:22+0000","dateStarted":"2017-10-29T23:30:22+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Well, that didn&rsquo;t work. Notice the permission error telling you that testuser1 does not have select privilege on *. Remember, for members of the testgroup, only select privileges on specific columns were granted.</p>\n<p>Now retry the query, this time specifying the following columns: id, email, firstname, lastname, username, title, gender, phone, age, cell, birthdate, registered.</p>\n</div>"}]}},{"text":"%livy.sql\nselect id, email, firstname, lastname, username, title,\ngender, phone, age, cell, birthdate, registered\nfrom users limit 10","dateUpdated":"2017-10-29T23:26:47+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607704_-2017439495","id":"20171026-135217_726842501","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29014"},{"text":"%md\n### Create dynamic column masking policy\n\nAlthough members of testgroup have permissions to see birthdates in the users table, AdventureWorks' admins have asked to mask the values in this column, at least for now. That way, members of this group can include this column in queries and reports in the meantime, without being able to see the actual data. To accomplish this, create a new dynamic column masking policy in Ranger, named `mask-users-birthdate`. This should apply a mask condition on users in the `testgroup` group to have the `Redact` select masking option on `select` operations for the `birthdate` column in the `weblogs` table in the `default` database.\n\nWhen you are done, your Hive masking policies should look similar to the following:\n\n![Ranger access policies](https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ranger-masking-policies.png)","dateUpdated":"2017-10-29T23:30:26+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607705_-2017824244","id":"20171029-213003_491251126","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29015","user":"testuser1","dateFinished":"2017-10-29T23:30:26+0000","dateStarted":"2017-10-29T23:30:26+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create dynamic column masking policy</h3>\n<p>Although members of testgroup have permissions to see birthdates in the users table, AdventureWorks&rsquo; admins have asked to mask the values in this column, at least for now. That way, members of this group can include this column in queries and reports in the meantime, without being able to see the actual data. To accomplish this, create a new dynamic column masking policy in Ranger, named <code>mask-users-birthdate</code>. This should apply a mask condition on users in the <code>testgroup</code> group to have the <code>Redact</code> select masking option on <code>select</code> operations for the <code>birthdate</code> column in the <code>weblogs</code> table in the <code>default</code> database.</p>\n<p>When you are done, your Hive masking policies should look similar to the following:</p>\n<p><img src=\"https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ranger-masking-policies.png\" alt=\"Ranger access policies\" /></p>\n</div>"}]}},{"text":"%md\nNow let's see whether the masking policy is properly redacting the birthdate column in the users table for our testuser1 account.","dateUpdated":"2017-10-29T23:30:30+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607707_-2017054746","id":"20171029-214549_215320024","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29016","user":"testuser1","dateFinished":"2017-10-29T23:30:30+0000","dateStarted":"2017-10-29T23:30:30+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now let&rsquo;s see whether the masking policy is properly redacting the birthdate column in the users table for our testuser1 account.</p>\n</div>"}]}},{"text":"%livy.sql\nselect id, email, firstname, lastname, username, title,\ngender, phone, age, cell, birthdate, registered\nfrom users limit 10","dateUpdated":"2017-10-29T23:26:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":{},"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"sql"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607707_-2017054746","id":"20171029-214552_999028446","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29017"},{"text":"%md\nNotice that the date values in the birthdate column are all listed as null. Great! Now we need to apply a row level filter.\n\nSelect the first 10 rows from weblogs where the action value is 'Purchased'. When you run this while logged in with the testuser1 account, you should see results.","dateUpdated":"2017-10-29T23:30:33+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607728_-2026673468","id":"20171029-214556_734734909","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29018","user":"testuser1","dateFinished":"2017-10-29T23:30:33+0000","dateStarted":"2017-10-29T23:30:33+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Notice that the date values in the birthdate column are all listed as null. Great! Now we need to apply a row level filter.</p>\n<p>Select the first 10 rows from weblogs where the action value is &lsquo;Purchased&rsquo;. When you run this while logged in with the testuser1 account, you should see results.</p>\n</div>"}]}},{"text":"%livy.sql\nselect * from weblogs\nwhere action = 'Purchased'\nlimit 10","dateUpdated":"2017-10-29T23:26:47+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607729_-2027058217","id":"20171026-135336_302299852","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29019"},{"text":"%md\n### Create row level filter policy\n\nAlthough members of the `testgroup` have access to the weblogs table, they should not be able to see transactions for purchase actions. Only admin-level users should view those records. To accomplish this, create a new row level filter policy in Ranger, named `hide-weblogs-purchased`. This should apply a row filter condition on users in the `testgroup` group to have the `action <> 'Purchased'` row level filter applied on `select` operations in the `weblogs` table in the `default` database.\n\nWhen you are done, your Hive row level filter policies should look similar to the following:\n\n![Ranger row level fitler policies](https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ranger-rls-policies.png)","dateUpdated":"2017-10-29T23:30:36+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607729_-2027058217","id":"20171029-215019_1862258363","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29020","user":"testuser1","dateFinished":"2017-10-29T23:30:36+0000","dateStarted":"2017-10-29T23:30:36+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create row level filter policy</h3>\n<p>Although members of the <code>testgroup</code> have access to the weblogs table, they should not be able to see transactions for purchase actions. Only admin-level users should view those records. To accomplish this, create a new row level filter policy in Ranger, named <code>hide-weblogs-purchased</code>. This should apply a row filter condition on users in the <code>testgroup</code> group to have the <code>action &lt;&gt; &#39;Purchased&#39;</code> row level filter applied on <code>select</code> operations in the <code>weblogs</code> table in the <code>default</code> database.</p>\n<p>When you are done, your Hive row level filter policies should look similar to the following:</p>\n<p><img src=\"https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/ranger-rls-policies.png\" alt=\"Ranger row level fitler policies\" /></p>\n</div>"}]}},{"text":"%md\nWith the new row level filter policy created, try selecting records from weblogs where action = 'Purchased' once again. This time, no records should return if you're logged in as testuser1.","dateUpdated":"2017-10-29T23:30:40+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607733_-2028597213","id":"20171029-224536_837255634","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29021","user":"testuser1","dateFinished":"2017-10-29T23:30:40+0000","dateStarted":"2017-10-29T23:30:40+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>With the new row level filter policy created, try selecting records from weblogs where action = &lsquo;Purchased&rsquo; once again. This time, no records should return if you&rsquo;re logged in as testuser1.</p>\n</div>"}]}},{"text":"%livy.sql\nselect * from weblogs\nwhere action = 'Purchased'\nlimit 10","dateUpdated":"2017-10-29T23:26:47+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607734_-2027442966","id":"20171026-152644_747617502","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29022"},{"text":"%md\nLet's execute one more query that gives us a count of each action in weblogs. We'll use this same data to create a chart in Power BI. You should see that the query results show the counts for Add To Cart and Browsed, but not Purchased, due to the row level filter.","dateUpdated":"2017-10-29T23:30:43+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607734_-2027442966","id":"20171029-224655_1978320029","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29023","user":"testuser1","dateFinished":"2017-10-29T23:30:43+0000","dateStarted":"2017-10-29T23:30:43+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Let&rsquo;s execute one more query that gives us a count of each action in weblogs. We&rsquo;ll use this same data to create a chart in Power BI. You should see that the query results show the counts for Add To Cart and Browsed, but not Purchased, due to the row level filter.</p>\n</div>"}]}},{"text":"%livy.sql\nselect action, COUNT(*) as Transactions from weblogs\ngroup by action","dateUpdated":"2017-10-29T23:26:47+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607735_-2027827715","id":"20171026-135541_2032864170","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29024"},{"text":"%md\n## Create report in Power BI using domain user credentials\n\nPower BI gives us the ability to create nice visualizations from data stored in a multitude of sources, include HDInsight. AdventureWorks would like to create a clustered bar chart that shows a count of user actions against the weblogs data at any time. What they expect is that when a member of testgroup uses their domain credentials to create the report, they will only see results for non-purchase actions, as seen in the above query.\n\nDownload and run the [Power BI Desktop](https://powerbi.microsoft.com/desktop/) software to create a DirectQuery connection to your domain-joined cluster, using the login credentials for the **testuser1@contoso.com** domain user. Create a clustered column chart that shows the counts for the following actions: Add To Cart and Browsed.\n\nThe end result should look like the following:\n\n![Power BI clustered column chart](https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/chart.png)","dateUpdated":"2017-10-29T23:30:47+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607736_-2029751460","id":"20171027-003538_832278149","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29025","user":"testuser1","dateFinished":"2017-10-29T23:30:47+0000","dateStarted":"2017-10-29T23:30:47+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Create report in Power BI using domain user credentials</h2>\n<p>Power BI gives us the ability to create nice visualizations from data stored in a multitude of sources, include HDInsight. AdventureWorks would like to create a clustered bar chart that shows a count of user actions against the weblogs data at any time. What they expect is that when a member of testgroup uses their domain credentials to create the report, they will only see results for non-purchase actions, as seen in the above query.</p>\n<p>Download and run the <a href=\"https://powerbi.microsoft.com/desktop/\">Power BI Desktop</a> software to create a DirectQuery connection to your domain-joined cluster, using the login credentials for the **<a href=\"mailto:&#116;&#101;&#115;&#116;&#x75;&#115;&#101;&#x72;1&#x40;&#99;o&#x6e;&#x74;&#111;&#x73;&#x6f;&#46;&#99;&#x6f;m&#42;&#42;\">&#116;&#101;&#115;&#116;&#x75;&#115;&#101;&#x72;1&#x40;&#99;o&#x6e;&#x74;&#111;&#x73;&#x6f;&#46;&#99;&#x6f;m&#42;&#42;</a> domain user. Create a clustered column chart that shows the counts for the following actions: Add To Cart and Browsed.</p>\n<p>The end result should look like the following:</p>\n<p><img src=\"https://raw.githubusercontent.com/ZoinerTejada/hdi-labs/master/Labs/Lab06/images/chart.png\" alt=\"Power BI clustered column chart\" /></p>\n</div>"}]}},{"text":"%md\n## Conclusion\n\nIn the lab, you have learned how to configure security on a domain-joined cluster, view domain users and groups in Ambari, and see how those security policies are applied when executing queries in Zeppelin notebooks and Power BI.","dateUpdated":"2017-10-29T23:30:51+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607737_-2030136209","id":"20171029-232113_86437345","dateCreated":"2017-10-29T23:26:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29026","user":"testuser1","dateFinished":"2017-10-29T23:30:51+0000","dateStarted":"2017-10-29T23:30:51+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Conclusion</h2>\n<p>In the lab, you have learned how to configure security on a domain-joined cluster, view domain users and groups in Ambari, and see how those security policies are applied when executing queries in Zeppelin notebooks and Power BI.</p>\n</div>"}]}},{"text":"%md\n","dateUpdated":"2017-10-29T23:26:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"editOnDblClick":true,"language":"markdown"},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509319607740_-2031290455","id":"20171029-232553_1041803181","dateCreated":"2017-10-29T23:26:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29027"}],"name":"Lab06","id":"2CYC9UWGJ","angularObjects":{"2CHS8UYQQ:shared_process":[],"2CKX6DGQZ:shared_process":[],"2CK8A9MEG:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKX8WPU1:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}